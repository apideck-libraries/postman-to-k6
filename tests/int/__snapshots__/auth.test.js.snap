// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`apikey 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      config.headers["Authorization"] = "secretApiKey";
    }
  });
}
"
`;

exports[`awsv4 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/spo-gpo.js";
import "./libs/shim/core.js";
import URI from "./libs/urijs.js";
import aws4 from "./libs/aws4.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const address = new URI(config.address);
      const options = {
        method: "GET",
        protocol: address.protocol(),
        hostname: address.hostname(),
        port: address.port(),
        path: address.path() + address.search(),
        body: config.data,
        region: "region",
        service: "service"
      };
      const credential = {
        accessKeyId: "accesskey",
        secretAccessKey: "secretkey",
        sessionToken: "session"
      };
      const signed = aws4.sign(options, credential);
      const [path, query = ""] = signed.path.split("?");
      config.address = new URI()
        .protocol(address.protocol())
        .hostname(signed.hostname)
        .path(path)
        .query(query)
        .toString();
      Object.assign(config.headers, signed.headers);
    }
  });
}
"
`;

exports[`basic 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import URI from "./libs/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const address = new URI(config.address);
      address.username("user123");
      address.password("secret");
      config.address = address.toString();
      config.options.auth = "basic";
    }
  });
}
"
`;

exports[`bearer 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      config.headers.Authorization = "Bearer secrettoken";
    }
  });
}
"
`;

exports[`digest 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import URI from "./libs/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const address = new URI(config.address);
      address.username("user123");
      address.password("secret");
      config.address = address.toString();
      config.options.auth = "digest";
    }
  });
}
"
`;

exports[`inherit collection 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      config.headers.Authorization = "Bearer token";
    }
  });
}
"
`;

exports[`inherit folder 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  group("TestFolder", function() {
    postman[Request]({
      name: "TestRequest",
      method: "GET",
      address: "http://example.com/",
      auth(config, Var) {
        config.headers.Authorization = "Bearer token";
      }
    });
  });
}
"
`;

exports[`inherit nested 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  group("TestFolder1", function() {
    group("TestFolder2", function() {
      group("TestFolder3", function() {
        group("TestFolder4", function() {
          postman[Request]({
            name: "TestRequest",
            method: "GET",
            address: "http://example.com/",
            auth(config, Var) {
              config.headers.Authorization = "Bearer token";
            }
          });
        });
      });
    });
  });
}
"
`;

exports[`noauth 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/"
  });
}
"
`;

exports[`ntlm 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import URI from "./libs/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const address = new URI(config.address);
      address.username("user123");
      address.password("secret");
      config.address = address.toString();
      config.options.auth = "ntlm";
    }
  });
}
"
`;

exports[`oauth1 address 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import OAuth from "./libs/oauth-1.0a.js";
import URI from "./libs/urijs.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    data: "line1\\nline2\\nline3\\n",
    auth(config, Var) {
      const options = {
        consumer: {
          key: "conkey",
          secret: "consec"
        },
        signature_method: "HMAC-SHA1",
        hash_function(data, key) {
          return hmac("sha1", key, data, "base64");
        },
        version: "1.0",
        realm: "realm@example.com"
      };
      const request = {
        method: config.method,
        url: config.address,
        data: {
          oauth_timestamp: "1",
          oauth_nonce: "10"
        }
      };
      const token = {
        key: "tokkey",
        secret: "toksec"
      };
      const oauth = OAuth(options);
      const auth = oauth.authorize(request, token);
      const address = new URI(config.address);
      for (const key of Object.keys(auth)) {
        address.addQuery(key, auth[key]);
      }
      config.address = address.toString();
    }
  });
}
"
`;

exports[`oauth1 body 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import OAuth from "./libs/oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "POST",
    address: "http://example.com/",
    auth(config, Var) {
      const options = {
        consumer: {
          key: "conkey",
          secret: "consec"
        },
        signature_method: "HMAC-SHA1",
        hash_function(data, key) {
          return hmac("sha1", key, data, "base64");
        },
        version: "1.0",
        realm: "realm@example.com"
      };
      const request = {
        method: config.method,
        url: config.address,
        data: {
          oauth_timestamp: "1",
          oauth_nonce: "10"
        }
      };
      const token = {
        key: "tokkey",
        secret: "toksec"
      };
      const oauth = OAuth(options);
      const auth = oauth.authorize(request, token);
      Object.assign(config.data, auth);
    }
  });
}
"
`;

exports[`oauth1 header sha1 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import OAuth from "./libs/oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const options = {
        consumer: {
          key: "conkey",
          secret: "consec"
        },
        signature_method: "HMAC-SHA1",
        hash_function(data, key) {
          return hmac("sha1", key, data, "base64");
        },
        version: "1.0",
        realm: "realm@example.com"
      };
      const request = {
        method: config.method,
        url: config.address,
        data: {
          oauth_timestamp: "1",
          oauth_nonce: "10"
        }
      };
      const token = {
        key: "tokkey",
        secret: "toksec"
      };
      const oauth = OAuth(options);
      const auth = oauth.toHeader(oauth.authorize(request, token));
      Object.assign(config.headers, auth);
    }
  });
}
"
`;

exports[`oauth1 header sha256 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import OAuth from "./libs/oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const options = {
        consumer: {
          key: "conkey",
          secret: "consec"
        },
        signature_method: "HMAC-SHA256",
        hash_function(data, key) {
          return hmac("sha256", key, data, "base64");
        },
        version: "1.0",
        realm: "realm@example.com"
      };
      const request = {
        method: config.method,
        url: config.address,
        data: {
          oauth_timestamp: "1",
          oauth_nonce: "10"
        }
      };
      const token = {
        key: "tokkey",
        secret: "toksec"
      };
      const oauth = OAuth(options);
      const auth = oauth.toHeader(oauth.authorize(request, token));
      Object.assign(config.headers, auth);
    }
  });
}
"
`;

exports[`oauth1 header text 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import OAuth from "./libs/oauth-1.0a.js";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const options = {
        consumer: {
          key: "conkey",
          secret: "consec"
        },
        signature_method: "PLAINTEXT",
        version: "1.0",
        realm: "realm@example.com"
      };
      const request = {
        method: config.method,
        url: config.address,
        data: {
          oauth_timestamp: "1",
          oauth_nonce: "10"
        }
      };
      const token = {
        key: "tokkey",
        secret: "toksec"
      };
      const oauth = OAuth(options);
      const auth = oauth.toHeader(oauth.authorize(request, token));
      Object.assign(config.headers, auth);
    }
  });
}
"
`;

exports[`oauth2 address 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import URI from "./libs/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      const address = new URI(config.address);
      address.addQuery("access_token", "token");
      config.address = address.toString();
    }
  });
}
"
`;

exports[`oauth2 header 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com/",
    auth(config, Var) {
      config.headers.Authorization = "Bearer token";
    }
  });
}
"
`;
