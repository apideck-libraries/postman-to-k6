// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`address start 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    domain: "example.com",
    machine: 573
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "{{machine}}.{{domain}}"
  });
}
"
`;

exports[`collection 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    domain: "example.com",
    machine: 573
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{machine}}.{{domain}}/"
  });
}
"
`;

exports[`data csv 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import papaparse from "./libs/papaparse.js";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("./data.csv");
  const rows = papaparse.parse(text, { header: true }).data;
  return rows;
})();
options.iterations = file.length;

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  data: file
});

export default function() {
  postman[Iteration]();

  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
"
`;

exports[`data custom iterations 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4, iterations: 27 };

const file = (() => {
  // Load data file
  const text = open("./data.json");
  const rows = JSON.parse(text);
  return rows;
})();

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  data: file
});

export default function() {
  postman[Iteration]();

  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
"
`;

exports[`data json 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("./data.json");
  const rows = JSON.parse(text);
  return rows;
})();
options.iterations = file.length;

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  data: file
});

export default function() {
  postman[Iteration]();

  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
"
`;

exports[`environment 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    first: "one",
    second: "two",
    third: "three"
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
"
`;

exports[`global 1`] = `
"// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  global: {
    first: "one",
    second: "two",
    third: "three"
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
"
`;
